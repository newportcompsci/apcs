{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/slides/unit-4/lesson-5","matchPath":"/slides/unit-4/lesson-5/*","webpackCompilationHash":"3ec582d1186cc48b507c","result":{"data":{"deck":{"id":"f52130d9-6121-511b-a7c7-d9e88b4778e1","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Shifting Values & Arrays of Objects\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\\f\"\n  }), \"int[] metroCardRides = {5, 4, 3, 2, 1};\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"How would you reorganize this array (within your code) so that the 5\\nmoves from the first element to the last element? \")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"*You cannot reinitialize the array.\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Store the first value in the array.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int first = metroCardRides [0];\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"How do we assign each value in the array to the next value in the array?\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Hint: Try using a for loop to cycle through!\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Cycle through the array:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"for (int j = 0; j < metroCardRides.length - 1; j++){\\n    metroCardRides [j] = metroCardRides [j + 1];\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What additional code do we need to add to finish our array?\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"0\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"4\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"4\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\")))), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public static void firstToLast(int[] metroCardRides) {\\n    int first = metroCardRides[0]; \\n\\n    for (int j = 0; j < metroCardRides.length - 1; j++) {\\n        metroCardRides[j] = metroCardRides[j + 1];\\n    }\\n\\n    metroCardRides[metroCardRides.length - 1] = first;\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"How can we do the opposite? Move the last element to the front?\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public static void firstToLastRight(int[] metroCardRides){\\n    int last = metroCardRides[metroCardRides.length - 1]; \\n    \\n    for (int j = metroCardRides.length - 1; j >= 1; j--){\\n        metroCardRides[j] = metroCardRides[j - 1];\\n    }\\n    \\n    metroCardRides[0] = last;\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"The Point Class\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"Point p = new Point(1, 2);\\n\")), mdx(\"p\", null, \"This class represents a coordinate pair (i.e., x and y values)\"), mdx(\"p\", null, \"Just like strings and arrays, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"p\"), \" is a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reference\"), \" to the object\\nthat represents the point (1, 2)\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Arrays of Objects\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"Point[] points = {\\n   new Point(3, 7),\\n   new Point(4, 5),\\n   new Point(8, 2),\\n   new Point(7, 5),\\n   new Point(2, 8)\\n};\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Memory representation\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://firebasestorage.googleapis.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LCzJq3zDWL4iTLVHjtD%2F-LIgRnn0b86AcUmy3QjG%2F-LIgRt2g1lz-OHy2-M65%2Ffigure-405h.png?generation=1532975359099491&alt=media\",\n    \"alt\": \"Array of points\"\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/slides/unit-4/lesson-5/*","isCreatedByStatefulCreatePages":false,"id":"f52130d9-6121-511b-a7c7-d9e88b4778e1","slug":"/apcs/slides/unit-4/lesson-5","title":"Shifting Values & Arrays of Objects"}}}