{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/slides/unit-2/lesson-4","matchPath":"/slides/unit-2/lesson-4/*","webpackCompilationHash":"a37ed6ad83fcdbdfae81","result":{"data":{"deck":{"id":"dffc293d-ff27-54c6-b21d-2e82192613a8","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Mixing Types & Casting\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Zombies, Werewolves, and Humans\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What do you think would happen if a zombie bit a werewolf?\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"So : Zombie > Werewolf > Human?\")), mdx(\"p\", null, \"Same thing happens when we mix together different types\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Strings, doubles, and integers\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Think about our past examples:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"1 + 9.0 = 10.0\\n1 + \\\"hello\\\" = \\\"1hello\\\"\\n1 + 2.0 + \\\"hello\\\" = \\\"3.0hello\\\"\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"So: String > double > int\")), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you combine an int and a double with an operator (+ - * / % ) the result is a double\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you combine an int and a String with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \" the result is a String \")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If you combine an double and a String with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \" the result is a String?\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Promoting\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In Java we call this promoting!\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int intVal = 1;\\ndouble doubleVal = 1.0;\\nString strVal = \\\"1\\\";\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Worksheet\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Introduction to Casting\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"(int) 4.29 // -> 4\\n(double) 1 // -> 1.0\\n\")), mdx(\"h3\", null, \"Note:\"), mdx(\"p\", null, \"String is not a primitive type and cannot be cast. Java will convert int and double to strings when concatenated with a string.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"String Casting / Parsing\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"\\\"\\\" + 4.892 // -> \\\"4.982\\\"\\n\")), mdx(\"h3\", null, \"Note\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"There is a trick to turning a String into a primitive though... Using Wrapper Classes\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Wrapper Classes\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"Integer.parseInt(\\\"4\\\") // -> 4\\nDouble.parseDouble(\\\"4.982\\\") // -> 4.982\\nInteger.parseInt(\\\"4.982\\\") // -> Runtime Exception!\\nDouble.parseDouble(\\\"4\\\") // -> 4.0\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Worksheet\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/slides/unit-2/lesson-4/*","isCreatedByStatefulCreatePages":false,"id":"dffc293d-ff27-54c6-b21d-2e82192613a8","slug":"/apcs/slides/unit-2/lesson-4","title":"Mixing Types & Casting"}}}