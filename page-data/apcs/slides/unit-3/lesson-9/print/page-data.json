{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/apcs/slides/unit-3/lesson-9/print","webpackCompilationHash":"3ec582d1186cc48b507c","result":{"data":{"deck":{"id":"1f6c89c1-3a6c-57bc-80dc-4e0fec19b8dc","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Relational Operators and if/else\"), mdx(\"hr\", null), mdx(\"h2\", null, \"if statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"if (test) { /// test = boolean or expression \\n    <statement>;\\n    <statement>;\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"if (test) {\\n    execute this code\\n    when test is true\\n}\\n\\nexecute this code always!\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"if (2 < 3) {\\n    System.out.println(\\\"a\\\");\\n}\\n\\nSystem.out.println(\\\"b\\\");\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"if (2 < 3) {\\n    System.out.println(\\\"a\\\");\\n}\\n\\nSystem.out.println(\\\"b\\\");\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"a \\nb\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"if (3 < 2){\\n    System.out.println(\\\"a\\\");\\n}\\n\\nSystem.out.println(\\\"b\\\"); \\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"if (3 < 2){\\n    System.out.println(\\\"a\\\");\\n}\\n\\nSystem.out.println(\\\"b\\\"); \\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"b\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int i = 2;\\nint j = 3; \\n\\nif (i < j) {\\n    System.out.println(\\\"a\\\");\\n}\\n\\nSystem.out.println(\\\"b\\\");\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int i = 2;\\nint j = 3; \\n\\nif (i < j) {\\n    System.out.println(\\\"a\\\");\\n}\\n\\nSystem.out.println(\\\"b\\\");\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"a \\nb\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if / else statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"if (test) {\\n    <statement>;\\n    <statement>;\\n} else {\\n    <statement>; \\n    <statement>; \\n}\\n\\n<statement>;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if / else statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"if (2 < 3) {\\n    System.out.println(\\\"a\\\");\\n} else {\\n    System.out.println(\\\"b\\\"); \\n}\\n\\nSystem.out.println(\\\"c\\\");\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if / else statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"if (2 < 3) {\\n    System.out.println(\\\"a\\\");\\n} else {\\n    System.out.println(\\\"b\\\"); \\n}\\n\\nSystem.out.println(\\\"c\\\");\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"a \\nc\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if / else statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"if (5 < 3){ \\n    System.out.println(\\\"a\\\"); \\n}else{ \\n    System.out.println(\\\"b\\\"); \\n}\\n\\nSystem.out.println(\\\"c\\\");\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"if / else statements\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"if (5 < 3){ \\n    System.out.println(\\\"a\\\"); \\n}else{ \\n    System.out.println(\\\"b\\\"); \\n}\\n\\nSystem.out.println(\\\"c\\\");\\n\")), mdx(\"h3\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"b \\nc\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"1f6c89c1-3a6c-57bc-80dc-4e0fec19b8dc","slug":"/apcs/slides/unit-3/lesson-9","title":"Relational Operators and if/else"}}}