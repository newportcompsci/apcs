{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/apcs/slides/unit-2/lesson-2/print","webpackCompilationHash":"87aec0580bde54de7d11","result":{"data":{"deck":{"id":"2ccb3913-9fac-586a-89a0-cc92c2b73612","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Declaring and Assigning Variables\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Discuss\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Turn and talk with your partner what sort's of conversions you need to\\ncalculate throughout the day. How do you go about calculating those conversions? \")), mdx(\"hr\", null), mdx(\"h2\", null, \"Variables\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A piece of the computer's memory that is given a name and type \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can store a value\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Example: preset station on a car stereo or cell phone speed dial\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Step 1: Declare the variable\"), mdx(\"p\", null, \"Sets aside memory for storing a value\"), mdx(\"p\", null, \"Variables must be declared before the variable can be used\"), mdx(\"p\", null, \"Syntax:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"<type> <variable name>;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"String is the type we have learned so far\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" is an identifier\"), mdx(\"p\", null, \"Naming convention is camel casing: lower case first letter\"), mdx(\"p\", null, \"Example: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"String myStringVar;\\nint myCounter;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 1:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"int age;\\nint ageeeeeeee;\\nint age \\nint thisIsAReallyLongVariableName;\\nint my age;\\nint my.age;\\nint \\\"age\\\";\\nint my;age;\\nint my;age;\\nint; hello;\\nint hello;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 2\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Write down the code that tells Java to declare an int variable with the name of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Step 2: Assign the variable\"), mdx(\"p\", null, \"Stores a value to the space reserved for the variable\"), mdx(\"p\", null, \"Syntax:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"<variable name> = <expression>;\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"the value stored can be updated as many times as needed \")), mdx(\"hr\", null), mdx(\"h2\", null, \"Variable Assignment\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"myCounter = 0;\\n\\n// We'll learn a better way to do this later\\nmyCounter = (myCounter + 1); \\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 3:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"age = 17;\\nage == 17;\\nage = \\\"seventeen\\\";\\nage = 17\\nage = (age + 1);\\nAge = 17;\\nage = (Age + 1);\\n17 = age;\\nage 17\\nage = 20,000;\\nage = 17.000;\\nage = $17\\nage = ;\\nage is 17;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Assignment and Declaring\"), mdx(\"p\", null, \"a value can be assigned the same time it is declared:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"<type> <variable name> = <expression>;\\n\")), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int age = 17; \\n\\n// is the same as \\n int age;\\n age = 17;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 4:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"int age is 17;\\nint; hello = 5;\\nint \\\"age\\\" = \\\"17\\\";\\nint money = $3,000;\\nint; hello = 5;\\nint hello = 5;\\nint ageeeeeeee = 17eeeeeeeee;\\nint h = 0;\\nint t =;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Step 3: Using the variable\"), mdx(\"p\", null, \"The variable's name can be used wherever you need to use that value\"), mdx(\"p\", null, \"Syntax:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"String value = \\\"Hello\\\";\\nSystem.out.println(value);\\nString valueWithNewline = value + \\\"\\\\n\\\";\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"The variable can be used as many times as needed\"), mdx(\"p\", null, \"changing the variable's value will be reflected in the code that used the variable\\nlater in the execution\"), mdx(\"p\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"String myStringVar = \\\"Hello there\\\";\\nSystem.out.println(myStringVar);\\nmyStringVar = \\\"Goodbye\\\";\\nSystem.out.println(myStringVar);\\n\")), mdx(\"p\", null, \"Output:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"hello there\\nGoodbye\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 5a\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int variableOne = 1;\\nint variableTwo = 4;\\nint variableThree  = variableOne + variableTwo;\\nvariableOne = variableTwo\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What are the values in all of the variables here?\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 5b\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int candies = 70;\\nint studentsInClass = 15;\\nint candiesPerStudent = candies / studentsInClass;\\nint candiesLeftOver = candies % studentsInClass;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 5c\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int a = 10;\\nint b = 100;\\nint c = 1000;\\nint d = a + b + c;\\nint e = d - a;\\nint f = 10 * e;\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 6\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"String greeting = \\\"Hello, world.\\\";\\nString greeting = \\\"Hello, world;\\\".\\nString greeting is \\\"Hello, world.\\\";\\nString greeting = \\\"Hello, woooooooorld.\\\";\\nString \\\"greeting\\\" = \\\"Hello, world.\\\";\\nString \\\"hello, world.\\\" = greeting;\\nString myString = \\\"My age is (17 + 1)\\\";\\nString myString = \\\"My age is \\\" + (17 + 1);\\nString what'sUp = \\\"How are you?\\\";\\nString hello = \\\"how are you?\\\"\\nString goodbye = 'See you later';\\nStriiiiiiiing greeting = \\\"Hello, world.\\\";\\nString greetiiiiiiiiing = \\\"Hello, world.\\\";\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Common Complier Errors\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A variable cannot be used until it is assigned\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Variable names cannot be declared twice\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the variable name is mistyped, the compiler will say the variable is undeclared\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Lab\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"You and your partner are going to pair program a Fahrenheit / Celcius converter using\\nwhat we have learned to day. \")), mdx(\"p\", null, \"---\\f\"), mdx(\"h2\", null, \"Practice-It\"), mdx(\"p\", null, \"Complete the following self-check questions:\"), mdx(\"p\", null, \"a. studentVariables\\nb. Values of A, B, C\"), mdx(\"p\", null, \"Complete the Practice-It exercise displacement.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"2ccb3913-9fac-586a-89a0-cc92c2b73612","slug":"/apcs/slides/unit-2/lesson-2","title":"Declaring and Assigning Variables"}}}