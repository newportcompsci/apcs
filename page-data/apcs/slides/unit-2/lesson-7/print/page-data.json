{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/apcs/slides/unit-2/lesson-7/print","webpackCompilationHash":"3db48704a16ea643ac01","result":{"data":{"deck":{"id":"95023548-ed0a-5533-90ca-b3b25db810a6","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Scope and Pseudocode\"), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class ScopePractice {\\n    public static void main(String[] args) {\\n        System.out.println(\\\"I see no variables here.\\\");\\n        for (int i = 0; i < 100; i++) {\\n            System.out.println(\\\"i is \\\" + i);\\n        }\\n        System.out.println(\\\"I see no variables here either.\\\");\\n        System.out.println(\\\"The value of i is \\\" i); // <- Error!\\n    }\\n}\\n\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"For for loops, the scope is relatively straightforward: any variable declared in the initialize part of the for loop is valid only inside the for loop itself.\"), mdx(\"p\", null, \"Determining the scope of other variable declarations requires more processing:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Work backward from the variable declaration to find the first left curly brace symbol {, then find the matching right curly brace }.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The variable\\u2019s scope is the section of the Java program starting at the variable declaration and ending at the right curly brace you just found.\"))), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class ScopePractice {\\n    public static void main(String[] args) { \\n        System.out.println(\\\"Hello, world\\\"); // <- X does not exist here\\n\\n        int x = 100; // <- X's scope start\\n        System.out.println(\\\"The value of x is \\\" + x);\\n    } // <- X's scope end\\n}\\n\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"There are some important rules about scope:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Attempting to use the variable outside of the variable\\u2019s scope is in an error.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is also an error to use a variable from one method in a different method, even if the second method was called from inside the variable\\u2019s scope.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can\\u2019t have two variables with the same name with overlapping scope.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can have two variables with the same name as long as their scopes don\\u2019t overlap.\")), mdx(\"hr\", null), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class ScopePractice {\\n    public static void fancyMethod() {\\n        int d = 7;\\n        System.out.println(\\\"d is \\\" + d);\\n    }\\n\\n    public static void main(String[] args) {\\n        int c = 10;\\n        fancyMethod();\\n        int b = 100;\\n        System.out.println(\\\"c is \\\" + c);\\n        anotherFancyMethod();\\n        System.out.println(\\\"b is \\\" + b);\\n    }\\n\\n    public static void anotherFancyMethod() {\\n        int a = 1;\\n        for (int i = 0; i < 3; i++) {\\n            int e = 42;\\n            System.out.println(\\\"e is \\\" + e);\\n        }\\n        System.out.println(\\\"a is \\\" + a);\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Worksheet Part 1\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Draw a box around the scope of the variable  a and label the box.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Draw a box around the scope of the variable  b and label the box.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Draw a box around the scope of the variable  c and label the box.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Draw a box around the scope of the variable  d and label the box.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Draw a box around the scope of the variable  e and label the box.\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"95023548-ed0a-5533-90ca-b3b25db810a6","slug":"/apcs/slides/unit-2/lesson-7","title":"Scope and Pseudocode"}}}