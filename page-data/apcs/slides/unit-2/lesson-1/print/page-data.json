{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/apcs/slides/unit-2/lesson-1/print","webpackCompilationHash":"a72e5f1128283e3dfd88","result":{"data":{"deck":{"id":"fd33cd0a-c99a-56f7-8e47-aed07955aadb","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Basic Data Concepts\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Data Types\"), mdx(\"p\", null, \"Two data type groups in Java:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Primitive: int , double, char, boolean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Objects: String - we'll deal with these later.\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Data Types\"), mdx(\"p\", null, \"Type: a name for a category of data values that are related.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"int: describes all whole numbers, or integers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"double: describes all numbers with decimal points.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"boolean: describes logical values true or false.\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Expressions\"), mdx(\"p\", null, \"Expression: a simple value or set of operations that produces a value \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"14\\n29.0009\\n12 + 6 * 9 - 1\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Arithmetic Operators\"), mdx(\"p\", null, \"Operator: a special symbol used to indicate that an operation is to be performed.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"+\", \" plus\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-\", \" minus\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"*\", \" multiply\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"/ divide\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"% modulus\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Precedence\"), mdx(\"p\", null, \"Just like you would expect in a normal math class\"), mdx(\"p\", null, \"Everything is solved left to right!\"), mdx(\"h3\", null, \"PEMDAS\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"P arentheses\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E xponent (ignore this for now)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"M ultiply / \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"D ivide / Modulus\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A ddition / \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"S ubtraction\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Computer Arithmetic\"), mdx(\"p\", null, \"Dividing two int values always results in a single int (always truncated: rounded down)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"10 / 2 = 5 \\n15 / 2 = 7 \\n19 / 10 = 1 \\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Dividing with a double results in a double\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"15 / 2.0 = 7.5\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Example problems:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"7 / 3 * 1.2 + 3 / 2\\n\\n1 * 2 + 3 * 5 % 4\\n\\n1 + 8 % 3 * 2 - 9\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Intro to String Concatenation : Expressions with Strings\"), mdx(\"p\", null, \"Converts other types to String Obeys Order of Operations\"), mdx(\"h2\", null, \"Examples\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"\\\"hello\\\" + 4 = \\\"hello4\\\"\\n\\n\\\"hello\\\" + 4 + 2 = \\\"hello42\\\"\\n\\n4 + 2 + \\\"hello\\\" = \\\"6hello\\\"\\n\\n\\\"hello\\\" + (4 + 2) = \\\"hello6\\\"\\n\\n\\\"hello\\\" + 4 * 2 = \\\"hello8\\\"\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Evaluating Expressions Activity\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Lab\"), mdx(\"p\", null, \"Do the TOP 5 PROBLEMS ONLY from each of the following:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BJP3 Self-Check 2.2: expressions1 (top 5 only)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BJP3 Self-Check 2.3: expressions2 (top 5 only)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BJP3 Self-Check 2.4: expressions3 (top 5 only)\")), mdx(\"p\", null, \"If the answer is a String, you must enclose the answer in \\\"double-quotes\\\"\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"fd33cd0a-c99a-56f7-8e47-aed07955aadb","slug":"/apcs/slides/unit-2/lesson-1","title":"Basic Data Concepts"}}}