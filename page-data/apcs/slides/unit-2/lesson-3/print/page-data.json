{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/apcs/slides/unit-2/lesson-3/print","webpackCompilationHash":"3ec582d1186cc48b507c","result":{"data":{"deck":{"id":"b3e1f0e3-c743-563e-a673-2d034b21f423","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = slideTheme;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"String Concatenation and Increment\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Intro to String Concatenation : Expressions with Strings\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"\\\"hello\\\" + 4 = \\\"hello4\\\"\\n\\n\\\"hello\\\" + 4 + 2 = \\\"hello42\\\"\\n\\n4 + 2 + \\\"hello\\\" = \\\"6hello\\\"\\n\\n\\\"hello\\\" + (4 + 2) = \\\"hello6\\\"\\n\\n\\\"hello\\\" + 4 * 2 = \\\"hello8\\\"\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"More Examples:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"1 + 2 + 3 + \\\"chocolate\\\" = ??? \\n\\n\\\"chocolate\\\"+ 1 + 2 + 3 = ???\\n\\n\\\"chocolate\\\"+ (1 + 2) + 3 = ???\\n\\n\\\"chocolate\\\"+ (1 + 2) / 3 = ???\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Examples\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"System.out.println(\\\"Spongebob thinks \\\" \\n    + \\\"the best time to wear a sweater\\\" \\n    + \\\" is all the time!\\\");\\n\\nSystem.out.println(\\\"Here we combine \\\" + 1 + \\\" integer\\\" + \\\" with strings!\\\");\\n\\nSystem.out.println(42 + \\\" is the answer to\\\" + \\\"everything!\\\" + 1 + 1)\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Introduction to Increment\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In Java, there are ways to increase/decrease a variable without writing\\nthe whole equation!\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"x += 7; // The same as -> x = x + 7; \\n\\ny /= 3; // The same as -> y = y / 3 ; \\n\\n// Both are the same as x = x + 1\\nx++; // use then change\\n++x; // change then use\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"GrudgeBall\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Rules\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Get into 6 groups\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each group starts with 10 points\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each group will take turns answering questions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If your group gets their question correct they can:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Take 2 points from any team OR\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Take a shot from the 2-point line or 3-point line\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2-point line: Take 3 points \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3-point line: Take 5 points\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You may distribute your points between multiple teams\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 1:\"), mdx(\"h3\", null, \"What does this expression evaluate to?\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"\\\"Patrick\\\" + \\\" why\\\" + \\\"are you\\\" + \\\"here?\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"Patrick whyare youhere?\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 2:\"), mdx(\"h3\", null, \"What does this expression evaluate to?\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"2 + \\\"words: \\\" + \\\"Na. Chos.\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"2words: Na. Chos.\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 3:\"), mdx(\"h3\", null, \"What does this expression evaluate to?\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"\\\"Friendship \\\" + 1 + \\\"$\\\" + \\\" magic!\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"Friendship 1$ magic!\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 4:\"), mdx(\"h3\", null, \"What does this expression evaluate to?\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"\\\"Watch out\\\" + \\\" for \\\" + \\\"\\\\\\\"\\\\\\\"\\\" + \\\"\\\" + \\\"escape sequences!\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"Watch out for \\\"\\\"escape sequences!\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 5:\"), mdx(\"h3\", null, \"What does this expression evaluate to?\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"\\\"Pikachu, pika pika\\\" + \\\"peeeeeeeeka\\\" + \\\" ch\\\" + 0 + 0 +\\\"!\\\"\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"Pikachu, pika pikapeeeeka ch00!\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 6:\"), mdx(\"h3\", null, \"What does this expression evaluate to?\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"\\\"PEMDAS\\\" + \\\"doesn't \\\" + (2 + 3) * 4 + \\\"matter \\\" + \\\"right?\\\" + 1\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"PEMDASdoesn\\u2019t 20matter right?1\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 7:\"), mdx(\"h3\", null, \"Write two statements that:\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Increases the current value of x by 150.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"x = x + 150;\\nx += 150;\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 8:\"), mdx(\"h3\", null, \"Write two statements that:\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Decreases the current value of y by 9.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"y = y - 9;\\ny -= 9;\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 9:\"), mdx(\"h3\", null, \"Write two statements that:\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Multiplies the current value of z by 5.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"z = z * 5;\\nz *= 5;\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 10:\"), mdx(\"h3\", null, \"Write two statement that:\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Divides the current value of q by 14. \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"q = q / 14;\\nq /= 14;\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 11:\"), mdx(\"h3\", null, \"Write two statements that:\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Increments x by 1. \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"// Any two of the following\\nx++; \\n++x;\\nx = x + 1;\\nx += 1;\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 12:\"), mdx(\"h3\", null, \"Write two statements that:\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Decrements x by 1.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"// Any two of the following\\nx--;\\n--x;\\nx = x - 1;\\nx -= 1;\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 13:\"), mdx(\"h3\", null, \"Predict the output\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int x = 1;\\nx += 3; \\nSystem.out.println(\\\"The value of x is \\\" + x);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"The value of x is 4\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 14:\"), mdx(\"h3\", null, \"Predict the output\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"System.out.println(1 + 1 + 1 + \\\"1\\\" + 1 + 1 + 1);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"31111\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 15:\"), mdx(\"h3\", null, \"Predict the output\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int y = 2;\\ny /= 2;\\nSystem.out.println(\\\"1 + \\\" + y + \\\"is how much again?\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"1 + 1is how much again?\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 16:\"), mdx(\"h3\", null, \"Predict the output\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"System.out.println(110 \\u2013 10 + \\\"flip it \\\" + 0 + 0 + 1);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"100flip it 001\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 17:\"), mdx(\"h3\", null, \"Predict the output\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"System.out.println(\\\"100 \\u2013 10\\\" + \\\"flip it \\\" + 0 + \\\"0 + 1\\\");\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"100 \\u2013 10flip it 00 + 1\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Question 18:\"), mdx(\"h3\", null, \"Predict the output\"), mdx(Appear, {\n    mdxType: \"Appear\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"int number = 5;\\nnumber++;\\nSystem.out.println(\\\"My new value\\\" + \\\"is the \\\" + \\\"number \\\" + number);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-raw\"\n  }), \"My new valueis the number 6\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b3e1f0e3-c743-563e-a673-2d034b21f423","slug":"/apcs/slides/unit-2/lesson-3","title":"String Concatenation and Increment"}}}